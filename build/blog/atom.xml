<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-test-site.com/blog</id>
    <title>IT Jamm Blog</title>
    <updated>2023-01-05T23:52:40.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-test-site.com/blog"/>
    <subtitle>IT Jamm Blog</subtitle>
    <icon>https://your-docusaurus-test-site.com/img/jam-favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[My Automation Nightmare]]></title>
        <id>My-Automation-Nightmare</id>
        <link href="https://your-docusaurus-test-site.com/blog/My-Automation-Nightmare"/>
        <updated>2023-01-05T23:52:40.000Z</updated>
        <summary type="html"><![CDATA[My Automation Nightmare]]></summary>
        <content type="html"><![CDATA[<p>How the hell do I automate a script in Azure?!?</p><p>Buckle up, this is probably going to be a long one, hopefully, by the end of it, you'll have a good idea of where to start with the problem of automating script in Azure.</p><p>You got a few options here for automating scripts in Azure, <a href="/blog/What is Automation in Azure">check out this post for the other options available to you here</a>,you've got Azure Functions, Logic Apps and Automation accounts. In this case, the scenario is PowerShell scripts and the tool I'm going to setup is an Automation account.</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>Document incoming</div><div class="admonitionContent_S0QG"><p>Check out the full tech doc for the Automation Account and my script example in the Docs area of the site. Annoyingly I cannot link it directly becuase of the way Docusarus works (not digging on you but, that is frustrating!).</p><p>Update: The document is still in the works, collecting all my info!</p></div></div><p>I'll do more on the other options in later posts.</p><ol><li>Setup the <strong>Resource Group</strong> and <strong>Automation Account</strong>.</li><li>Setup the <strong>Identity for the Automation Account</strong>, this is key to running scripts against Azure Active Directoy and Office 365 resources.</li><li>Create ourselves a <strong>Runbook</strong>, that sits inside the Automation Account.</li><li><strong>Install the</strong> relevant<strong> modules</strong> for the code we want to run.</li><li>Write ourselves a little script.</li><li>Setup <strong>a schedule</strong> for the Runbook.</li></ol><p>Estimated time to completion: 1 hour (probably more than that if you're creating the script for the first time!)</p><p>Now, that sounds pretty simple when it's written in a small list like the one above eh? I can tell you now that I ran into random issues all over the place and, that 1 hour estimate went straight out the window!</p><p>Step 1 flew by, steps 2, 3 and 4 went by like a flash, I was 15 minutes in and feeling pretty confident with how it was going so far. Considering I'd suggested doing this process at my day job to demonstrate how easy it can be to set up and the time-saving benefits we could reap once it's set up.</p><p>Well, I was in for a surprise.........</p><p>For step 2 in the list, Setup the Identity for the Automation Account, I chose to use a System-assigned Managed Identity, it sounded right up my street for what I needed to do.</p><blockquote><p>The service principal is tied to the lifecycle of that Azure resource. When the Azure resource is deleted, Azure automatically deletes the service principal for you.
By design, only that Azure resource can use this identity to request tokens from Azure AD.
You authorize the managed identity to have access to one or more services.</p><p>Quoted from <a href="https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview#managed-identity-types" target="_blank" rel="noopener noreferrer">Microsotft Doc</a>.</p></blockquote><p>Maybe I am just a bit of an idiot on this one because looking back on this, that doesn't sound quite right, although the user assigned managed identity also didn't sound much different to me either......</p><p>Before I knew it, I'm at the point of testing my script, I've followed through the Microsoft docs for how to leverage the System-assigned Managed Identity to connect to Exchange Online and feeling fairly confident althoug skeptical as to
how minmal that command actually is.</p><div class="language-powershell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-powershell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token variable" style="color:#36acaa">$tenantDomain</span><span class="token plain"> = </span><span class="token string" style="color:#e3116c">"mydomain.onmicrosoft.com"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># Domain of the tenant the managed identity belongs to </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">Connect-ExchangeOnline</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ManagedIdentity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">Organization </span><span class="token variable" style="color:#36acaa">$tenantDomain</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Lo and behold, that failed. What followed was a 3 hour battle with this thing before I realised that the System-assigned Managed Identity does not allow you to connect to Office 365\Azure out of the box, it's designed not to do this.</p><p>What ensued was an uphill battle to assign the Exchange Admin role and API permissions via the command line to the System-assigned Managed Identity. I was just about ready to throw it out the window when I crumbled and deciced to use a service account (added credentials to the Automation Account) to get it up and running</p><p>This was dissappointing on several levels, I really wanted to get this setup to not use any credentials, I guess that is a task for another day now, as for demonstration purposes, it works a treat!</p><p>Anyway, that whole debacle cost me almost a full working day to get my head around, hopefully, my pain works for your gain...a good example of RTFM and don't force something to work, there's a good chance it's not meant too.</p><p>Thanks for reading!</p>]]></content>
        <author>
            <name>itjamm</name>
        </author>
        <category label="Azure" term="Azure"/>
        <category label="Automation Account" term="Automation Account"/>
        <category label="PowerShell" term="PowerShell"/>
        <category label="Managed Identities" term="Managed Identities"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What can you Automate]]></title>
        <id>What can you Automate</id>
        <link href="https://your-docusaurus-test-site.com/blog/What can you Automate"/>
        <updated>2023-01-03T16:07:22.000Z</updated>
        <summary type="html"><![CDATA[What can be automated in Azure?]]></summary>
        <content type="html"><![CDATA[<p>Some suggestions on what tasks could be automated in Azure through a mentioned method.</p><p>The information below is based off of Microsoft Articles and my expeience both in work and in personal projects. I'll not be digging into the items mentioned on the web link below, instead trying to offer items from my experience instead.</p><p>Check out the Microsoft Doc, <a href="https://learn.microsoft.com/en-us/azure/automation/overview#common-scenarios" target="_blank" rel="noopener noreferrer">here</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-joiner-mover-and-leaver-processes">1. Joiner, Mover and Leaver Processes<a class="hash-link" href="#1-joiner-mover-and-leaver-processes" title="Direct link to heading">â€‹</a></h2><p>If you're or, have worked in a Service Desk role level 1 upwards, you'll be well aware of the pain that is administering user accounts. The amount of time spent correcting someone's first or last name is crazy!</p><p>In my experience, we squashed a lot of the mistakes by automating the process as much as possible. I've done this using PowerShell and getting the Service Desk staff to submit the new starter or leaver data into the form. I'll upload this script to the Github repo, please note that the script is targeted at hybrid environments.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-certificate--secret-management-for-azure-ad">2. Certificate &amp; Secret Management for Azure AD<a class="hash-link" href="#2-certificate--secret-management-for-azure-ad" title="Direct link to heading">â€‹</a></h2><p>Azure AD is a wonderful tool but, it can be super complex to manage and keep track of what's going on within it. One such task is making sure that none of the App Registrations has a soon-to-expire certificate or secret.</p><p>The best solution to this is tracking your certs in some fashion however, whatever solution you chose to use, if someone adds a new App Registration then that may not be picked up. </p><p>Link to a script created by Microsoft, <a href="https://github.com/ITJamm/Automation/blob/main/PowerShell/Azure%20Active%20Directory/Application-Secrets-%26-Certificates.ps1" target="_blank" rel="noopener noreferrer">here</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-reporting">3. Reporting<a class="hash-link" href="#3-reporting" title="Direct link to heading">â€‹</a></h2><p>Something that has always come up is keeping an accurate asset inventory for Azure AD joined devices as well as all of the other types captured within Intune.</p><p>Since Intune does not have its own PowerShell module (I think, <a href="https://github.com/microsoft/Intune-PowerShell-SDK#Example-usage" target="_blank" rel="noopener noreferrer">I did find this however from Microsoft's Github!</a>), you'd need to rely on one of the Microsoft portals for a report, which isn't too annoying to get in real terms.</p><p>An automated method would be to create a script to connect to Azure AD, retrieve device information and dump this out into Excel for someone to review. You could host this in an Automation account in Azure to run automatically.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-patch-management">4. Patch Management<a class="hash-link" href="#4-patch-management" title="Direct link to heading">â€‹</a></h2><p>At the moment, you can patch your VM estate using an Automation account rather than relying on running your own WSUS server, of course, if you want to control the flow better in line with any on-prem infrastructure that'd be the way to go; I'd still suggest letting Microsoft patch them though, it's remarkably good and a great quality of life update for your engineers!</p><p>On a side note, I believe Microsoft has just released Update management centre which is its own service in Azure to replace the Automation account method mentioned above.</p><p>Learn more about Update Management Centre,<a href="https://learn.microsoft.com/en-gb/azure/update-center/" target="_blank" rel="noopener noreferrer">here</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-configuration-management">5. Configuration Management<a class="hash-link" href="#5-configuration-management" title="Direct link to heading">â€‹</a></h2><p>Automation of resource creation and also management is a great use of this technology. As I've mentioned previously, Bicep and PowerShell will let you do this, along with Terraform which works well with Azure.</p><p>Other languages will let you do this but, I have only used the three mentioned above.</p><p>Thanks for reading!</p>]]></content>
        <author>
            <name>itjamm</name>
        </author>
        <category label="Blogpost" term="Blogpost"/>
        <category label="Automation" term="Automation"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is Automation in Azure?]]></title>
        <id>What is Automation in Azure</id>
        <link href="https://your-docusaurus-test-site.com/blog/What is Automation in Azure"/>
        <updated>2023-01-03T16:03:10.000Z</updated>
        <summary type="html"><![CDATA[Automation is needed, almost required, in three general areas of cloud operations;]]></summary>
        <content type="html"><![CDATA[<p>Automation is needed, almost required, in three general areas of cloud operations;</p><p><strong>Deployment and management of resources</strong> - To deliver a repeatable and consistent infrastructure.</p><p><strong>Response</strong> - Event-based automation can be used to diagnose and resolve issues within the on-prem and off-prem environments.</p><p><strong>Orchestrate</strong> - Orchestrate and integrate your automation with other Azure or third party services and products.</p><p>Using any one of the three above can be a huge improvement to the working quality of life of the team and can save huge amounts of time if implemented well. Firstly you need to get your team on board with this approach, which can present its own challenge.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-pros-and-cons-of-the-automation-approach">2. Pros and Cons of the Automation Approach<a class="hash-link" href="#2-pros-and-cons-of-the-automation-approach" title="Direct link to heading">â€‹</a></h2><p>I may well be a little biased here but, in my experience, if the status quo is to prefer manual tasks. It will be hard going initially to get others to see the light that is automating away "their" jobs. I use quote marks there because, the typical Infrastructure role is changing rapidly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="21-pros">2.1. Pros<a class="hash-link" href="#21-pros" title="Direct link to heading">â€‹</a></h3><ul><li>Reduce time to perform an action.</li><li>Reduce risk in performing the action.</li><li>Freeing up staff from the burden of manual tasks.</li><li>Standardisation of tasks.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="22-cons">2.2. Cons<a class="hash-link" href="#22-cons" title="Direct link to heading">â€‹</a></h3><ul><li>Time consuming to implement in the first instance.</li><li>Staff need training on the automation methods.</li><li>You may encounter resistance when it comes to changing the status quo.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-tools-at-your-disposal">3. Tools at your disposal<a class="hash-link" href="#3-tools-at-your-disposal" title="Direct link to heading">â€‹</a></h2><p>A very brief overview of the various tools that can be used, my first suggestion is to investigate the use of PowerShell and RunBooks; they've always seemed to make the most sense to start with.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="31-powershell">3.1. PowerShell<a class="hash-link" href="#31-powershell" title="Direct link to heading">â€‹</a></h3><p>This is an incredibly versatile tool that can be used to manage almost any resource on-prem and in the cloud. I'd suggest digging into the <a href="https://learn.microsoft.com/en-us/cli/azure/" target="_blank" rel="noopener noreferrer">Azure CLI</a> and also familiarising yourself with the Office 365 modules too (<a href="https://learn.microsoft.com/en-us/powershell/sharepoint/?view=sharepoint-ps" target="_blank" rel="noopener noreferrer">SharePoint Online</a>, <a href="https://learn.microsoft.com/en-us/powershell/exchange/exchange-online-powershell-v2?view=exchange-ps" target="_blank" rel="noopener noreferrer">Exchange Online</a>, <a href="https://learn.microsoft.com/en-us/microsoftteams/teams-powershell-overview" target="_blank" rel="noopener noreferrer">Microsoft Teams</a>, <a href="https://learn.microsoft.com/en-us/powershell/azure/active-directory/overview?view=azureadps-2.0" target="_blank" rel="noopener noreferrer">Azure Active Directory</a>, more in-depth KBs and posts to follow on these.</p><p>You aren't just restricted to using PowerShell from your machine running the Windows OS, you can also use an Automation Account with a PowerShell runbook, I'll upload a KB to get you started soon!</p><p>Learn more about PowerShell <a href="https://learn.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.3" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="32-azure-bicep">3.2. Azure Bicep<a class="hash-link" href="#32-azure-bicep" title="Direct link to heading">â€‹</a></h3><p>Bicep is a declarative language, used to deploy Azure resources. In a Bicep file, you define what you want to deploy to Azure and then use that file to repeatedly deploy your infrastructure. It's a great tool to ensure consistency in your environments although, this is a separate language to learn and only applies to Azure.</p><p>You can learn more about Bicep <a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview?tabs=bicep" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="33-azure-logic-apps">3.3. Azure Logic Apps<a class="hash-link" href="#33-azure-logic-apps" title="Direct link to heading">â€‹</a></h3><p>Logic Apps is a cloud platform\service where you can create and run workflows in Azure (there's an Office 365 version with a cut-down toolset called Power Automate which is also really good). The major plus of using these is that they require little to no code at all to set up, it's all visual.</p><p>Logic Apps integrate with most Office 365 and Azure services making them versatile, easy to maintain and accessible to people with less knowledge of coding.</p><p>Learn more about Logic Apps <a href="https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-overview" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Thanks for reading!</p><p>I hope that gives you some idea of what options there are for automation in Azure, I'll be following up with another post of suggested processes you can automate both from suggestions online and from my experience.</p>]]></content>
        <author>
            <name>itjamm</name>
        </author>
        <category label="BlogPost" term="BlogPost"/>
        <category label="Automation" term="Automation"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Permission & Resource Management]]></title>
        <id>Azure Permission &amp; Resource Management</id>
        <link href="https://your-docusaurus-test-site.com/blog/Azure Permission &amp; Resource Management"/>
        <updated>2023-01-03T13:18:40.000Z</updated>
        <summary type="html"><![CDATA[Something that can be quite annoying to grasp are the varying permission levels and roles involved in the Microsoft Cloud platforms.]]></summary>
        <content type="html"><![CDATA[<p>Something that can be quite annoying to grasp are the varying permission levels and roles involved in the Microsoft Cloud platforms.</p><p>For the most part, us techies will learn from the group up starting from on-prem NTFS\Share permissions, to have then to learn Office 365 roles.</p><p>Now we've got those two down, time to shove another layer on top which is the permissions inside Azure, hopefully the below can simplify this for you.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-the-4-management-levels">1. The 4 management levels<a class="hash-link" href="#1-the-4-management-levels" title="Direct link to heading">â€‹</a></h2><p>The below is nothing original by the way, I've lifted it and re-written the concepts into another format from a Microsoft docs article here, you may prefer their version.</p><p><a href="https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-setup-guide/organize-resources" target="_blank" rel="noopener noreferrer">Organize your Azure resources effectively</a></p><p><strong>Management group</strong>s help to manage access via policy and compliance over multiple subscriptions. When a subscription is part of a management group, it'll automatically inherit all conditionas\settings setup in the management group.</p><p><strong>Subscriptions</strong> logically associate permissions with resources they create. Each individual subscription has limits\quotas regarding the amount of resources it can create\use. Subscriptions also help to organise costs.</p><p><strong>Resource Groups</strong> are logical containers, where you can deploy Azure resources to; you could think of them being along the lines of Folders. You can also apply tags to help better manage resources and what they're for.</p><p><strong>Resources</strong> are instances of services that you can create.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-managing-access-to-resources">2. Managing Access to resources<a class="hash-link" href="#2-managing-access-to-resources" title="Direct link to heading">â€‹</a></h2><p>We should always plan for the least privileges required to allow a team to work, the permission model in Azure is designed to allow this however, I'd say it is so granular that it generates more work that necessary in most cases.</p><p>Here's a basic list from my experience setting up a permission model in the past; it covers a service desk team.</p><ul><li>Call Agent team - No access to Azure resources.</li><li>Level 1, 2 and 3 teams - Reader access at the Subscription level, providing Contributor role at the Resource Group or Resource level where appropriate.</li><li>Infrastructure - If the team also performs security functions, I would suggest the Contributor role be assigned of at the Subscription Level where appropriate and to assign the Owner role at the resource group level where the Infrastructure they "own" is situated.</li></ul><p>Permission elevation controls and experience levels should be taken into account. In previous companies, I'd trust the L2 team to have the same access as L3 and, in some cases I'd not even consider it!</p><p>You can also control Service Desk team access using Change Control. Asking them to justify their access requirements via a change process not only allows others to check what they're doing, it could also show that they do not need to access rights in the first place.</p><p>Speaking from experience, I'd highly recommend trusting your Infrastructure team to have the Contributor role at the Subscription level where possible. It will make a lot of difference to all teams "quality of life" if they've access to someone who can carry out actions they cannot.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-resource-tagging">3. Resource tagging<a class="hash-link" href="#3-resource-tagging" title="Direct link to heading">â€‹</a></h2><p>Tags can be an absolute godsent and can help you to quickly identify your resources and resource groups. You apply tags to your Azure resources and resource groups to logically organize them into categories.  </p><p>Tags can include context about the resource's associated workload or application, operational requirements, and ownership information.</p><p>Some suggested uses for tags;
<strong>Metadata and documentation</strong>, Admins can apply a tag to all resources matching a specific workload or project.
<strong>Automation</strong>, you can target a tag for scripts etc.
<strong>Cost analysis</strong>, this is the most common use case that I've come across for tags.</p><p>Each resource or resource group can have a maximum of 50 tag name and value pairs. This limitation only applies to tags directly applied to the resource group or resource.</p><p>That turned out to be a little longer than I'd hoped for, with any luck it'll be of some use.</p>]]></content>
        <author>
            <name>itjamm</name>
        </author>
        <category label="KB" term="KB"/>
        <category label="Azure" term="Azure"/>
        <category label="Permissions" term="Permissions"/>
    </entry>
</feed>
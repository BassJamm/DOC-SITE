[{"title":"Approve or Block an App","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Teams/Approve or Block an App","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Steps to complete​","type":1,"pageTitle":"Approve or Block an App","url":"/Articles/Microsoft/Teams/Approve or Block an App#1-steps-to-complete","content":"Login to Teams Admin Centre, https://admin.teams.microsoft.com/Click Teams Apps &gt; Manage apps.In the section towards the bottom of the page, search for the applicaton and select it.Click on Allow or Block in the action bar above the list. "},{"title":"Resizing a Virtual Machine","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Azure Resources Management/Resizing a Virtual Machine","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Before you begin​","type":1,"pageTitle":"Resizing a Virtual Machine","url":"/Articles/Microsoft/Azure Resources Management/Resizing a Virtual Machine#1-before-you-begin","content":"Shutdown the VM from within it's OS if possible (Not always necessary at all but, nice to do).If you cannot see the VM size that you're looking for it may not be compatible with your VM. You can have too many disk or NICs attached to the VM for the size you want. The typ of disks that you have attached can limit your options, premium and standard tier. "},{"title":"2. Re-siging the vm​","type":1,"pageTitle":"Resizing a Virtual Machine","url":"/Articles/Microsoft/Azure Resources Management/Resizing a Virtual Machine#2-re-siging-the-vm","content":"De-allocating a VM can cause issues! De-allocating the VM also releases any dynamic IP addresses assigned to the VM. The OS and data disks are not affected. At the same time, you're releasing your ownership of the size of that VM. If you are resizing a production VM, consider using Azure Capacity Reservations to reserve Compute capacity in the region; otherwise you may have to pick another size. Open the Azure portal, https://portal.azure.com.Search for your virtual machine.In the left menu, Select Size.Choose the new size from the list of available sizes and then Select Resize. "},{"title":"AutoPilot Reset","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Intune/AutoPilot Reset","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Before you start​","type":1,"pageTitle":"AutoPilot Reset","url":"/Articles/Microsoft/Intune/AutoPilot Reset#1-before-you-start","content":"info Ignore this step if you know you do not use group tags. Confirm the device has the correct group tag Sometimes group tags within Autopilot are used to assign device profiles\\policies after the device has been enrolled. This group tag must be correct if you're using them otherwise, it'll interfer with the reset process. Login to Microsoft Endpoint Manager, https://endpoint.microsoft.com/.Click Devices &gt; Windows &gt; Windows Enrollment &gt; Devices.Find the Serial number of the device and search it here.Click on your device, alter group tag** here to the correct one.Click Save caution Wait for the profile status to change to assigned before progressing, this is automatic and in my experience can take up to 30 minutes. "},{"title":"2. Initiate the reset​","type":1,"pageTitle":"AutoPilot Reset","url":"/Articles/Microsoft/Intune/AutoPilot Reset#2-initiate-the-reset","content":"tip The Windows device MUST have a stable internet connection to complete this process. Login to Microsoft Endpoint Manager, https://endpoint.microsoft.com/.Click Devices &gt; Windows &gt; Windows Devices, it should already be on this option.Search for your device and click on the device name.Click the Autopilot Reset option.Click Yes. "},{"title":"3. On the device​","type":1,"pageTitle":"AutoPilot Reset","url":"/Articles/Microsoft/Intune/AutoPilot Reset#3-on-the-device","content":"Make sure the machine is powered on and connected to an internet source.The Autopilot process should start automatically.When the option appears, select Windows Autopilot provisioning. Autopilot should take over from here and reset the device. Once the above completes you should then be returned to a normal looking Windows login prompt. "},{"title":"Take ownership of customer azure subscription","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Microsoft Partner Centre/take ownership of customer azure subscription","content":"Take ownership of customer azure subscription Microsoft Article: Reinstate admin privileges for a customer's Azure CSP subscriptions. # Connect to Sub. Connect-AzAccount -TenantID &quot;&lt;Customer TenantID&gt;&quot; # Set the subscription context you want to add partner permissions too. Set-AzContext -SubscriptionID &quot;&lt;Customer Subscription ID&gt;&quot; # Assign the &quot;adminagents&quot; group in Partner tenant to the customer subscription New-AzRoleAssignment -ObjectID &quot;&lt;Object ID of the AdminAgents group from step 7 of your actions section&gt;&quot; -RoleDefinitionName &quot;Owner&quot; -Scope &quot;/subscriptions/&lt;CSP subscription ID&gt;&quot; -ObjectType &quot;ForeignGroup&quot; ","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Restore from Snapshot","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Azure Resources Management/Restore from Snapshot","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Create your snapshot​","type":1,"pageTitle":"Restore from Snapshot","url":"/Articles/Microsoft/Azure Resources Management/Restore from Snapshot#1-create-your-snapshot","content":"Validate the Snapshot Make sure to check the SnapShot is valid before starting this process. Open the Azure portal, https://portal.azure.com.Navigate to a VM that is available to have a disk attached to it.Click on Disks on the left-hand side.Create a new disk.Click Edit on the far right hand side. As shown in red above.Name your Disk, I'd suggest, snapshot_ServerName_Date_TimeSource, Select snapshot.Select the Snapshot you wish to attach.Make any changes to the Encryption Type.I'd suggest it not to be a shared disk.Press Save. This shouldn't take too long. info If you see the error below, change the Host Caching option to &quot;none&quot;.  "},{"title":"2. Confirm disk is visibile in the OS​","type":1,"pageTitle":"Restore from Snapshot","url":"/Articles/Microsoft/Azure Resources Management/Restore from Snapshot#2-confirm-disk-is-visibile-in-the-os","content":"tip The share should be available from the get go however, you may need to bring the disk online within computer management. RDP into your VM &amp; check File Explorer for your disk, the name will be what the share was called originally.Open Computer Management, Click Disk Management.Right-Click on the disk, mark it as Oneline. You should now see it in File Explorer. "},{"title":"3. Detach the disk​","type":1,"pageTitle":"Restore from Snapshot","url":"/Articles/Microsoft/Azure Resources Management/Restore from Snapshot#3-detach-the-disk","content":"Close any open sessions to the disk that you attached.Navigate back to the VM in Azure Management Portal.Click the X button to the right-hand side of the disk. "},{"title":"PwshCli CheatSheet","type":0,"sectionRef":"#","url":"/Articles/PowerShell/PwshCli CheatSheet","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Command Syntax Help​","type":1,"pageTitle":"PwshCli CheatSheet","url":"/Articles/PowerShell/PwshCli CheatSheet#1-command-syntax-help","content":"Command\tDescriptionGet-help &lt;command you want help with&gt;\tWill return cmd syntax. Get-help &lt;command you want help with&gt; -example\tWill return cmd examples (if available. Get-Command\tWill return all available comamnds from installed modules. Get-Command -Name Get-*\tWill search from whatever string between, after or before wildcards *. "},{"title":"2. Troubleshooting Commands​","type":1,"pageTitle":"PwshCli CheatSheet","url":"/Articles/PowerShell/PwshCli CheatSheet#2-troubleshooting-commands","content":"Command\tDescriptionGet-NetIPAddress -All\tReturns IPv4 and IPv6 configuration data and information about the interfaces those addresses are associated with. Get-NetIPConfiguration\tReturns networking configuration, including usable interfaces, IP addresses, and DNS servers. Test-NetConnection\tWill run a ping and TCP connection to the designated destionation. Test-NetConnection -port 8080 -ComputerName imagine01\tWill run a ping and TCP connection to the designated destionation on the chosen port. dsregcmd /status\tWill return the Azure Active Directory configuration of a machine. "},{"title":"3. Variables​","type":1,"pageTitle":"PwshCli CheatSheet","url":"/Articles/PowerShell/PwshCli CheatSheet#3-variables","content":"Variables are useful for storing data that will need to referenced or used later on, perfect for making scripts. You can store all types of information in variables for example, commands, results, names, paths, settings and values. Microsoft link - Long Description of Variables. There are a few types of variables: Automatic variables, these can be refernced, for example, $PSHOME or $PROFILE, these cannot be changed.User-created variables, the user creates these and can freely, delete and change them.Preference variables, these variables store user preferences for PowerShell, for example, the $MaximumHistoryCount. Example of User-Crated variables $MyVariable = 1, 2, 3 $Path = &quot;C:\\Windows\\System32&quot;  "},{"title":"Removing data and licenses","type":0,"sectionRef":"#","url":"/Articles/Veeam/Veeam Backup for O365/Removing data and licenses","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. References​","type":1,"pageTitle":"Removing data and licenses","url":"/Articles/Veeam/Veeam Backup for O365/Removing data and licenses#1-references","content":"Veeam Blog post - How to remove a license from a user in Veeam Backup for Microsoft Office 365. Veeam Rest API Reference - Revoking Licenses from users. "},{"title":"2. Overview​","type":1,"pageTitle":"Removing data and licenses","url":"/Articles/Veeam/Veeam Backup for O365/Removing data and licenses#2-overview","content":"To remove a license from a user, you first need to delete that user’s data from all configured repositories and run the remove license command with PowerShell. This can be useful if you accidently backed up a user and no longer need to keep the data. Otherwise, you must wait the 31-day threshold for the license to be reallocated. "},{"title":"3. Checking for stored data​","type":1,"pageTitle":"Removing data and licenses","url":"/Articles/Veeam/Veeam Backup for O365/Removing data and licenses#3-checking-for-stored-data","content":"Firstly, you'll need to check if there is any data stored for the user you want to remove the licnese from. Open the Veeam Backup console on your application host, select the hamburger menu in the top left, navigate to Console and click on PowerShell. # This script will show you what a data a user has on a particular repository # Fill in &quot;REPOSITORY&quot; with the name of the repository as it is showing in # Veeam Backup for Office 365 and the email address of the user you wish to remove the data for &quot;USER@DOMAIN.com&quot; $repository = Get-VBORepository -Name &quot;REPOSITORY&quot; $user = Get-VBOEntityData -Type User -Repository $repository -Name &quot;USER@DOMAIN.com&quot; $user  Provided the command above runs successfully, you'll get a table returned showing the repositories as headings, with True or False under them depending on whether the user has data in them. "},{"title":"4. Delete the user data from each repo​","type":1,"pageTitle":"Removing data and licenses","url":"/Articles/Veeam/Veeam Backup for O365/Removing data and licenses#4-delete-the-user-data-from-each-repo","content":"I won't regurgitate the perfectly good Veeam article, the link is below for all of the commands needed. How to remove a license from a user in Veeam Backup for Microsoft Office 365. Make sure to follow each section in the rough order of the article, skip over the ones where your user has no data. "},{"title":"5. Issues​","type":1,"pageTitle":"Removing data and licenses","url":"/Articles/Veeam/Veeam Backup for O365/Removing data and licenses#5-issues","content":"I ended up having to raise a support request in the end as I had some troublesome admin users who'd had their data backed up in error. I was asked by the support team member who helped me to not store the script that was used. "},{"title":"5.1. Commands returning \"Null\"​","type":1,"pageTitle":"Removing data and licenses","url":"/Articles/Veeam/Veeam Backup for O365/Removing data and licenses#51-commands-returning-null","content":"Some of the commands above for some reason will return a “null” error when using them, you will need to pipe the command into a search to find the relevant data. Get-VBOLicensedUser -Organization $org | ?{$_.username -like &quot;*-adm*&quot;} # You can then loop through an array if you store the above command into a variable. Get-VBOLicensedUser -Organization $org |?{$_.username -like &quot;*-adm*&quot;}|foreach-object {remove-vbolicenseduser $_}  "},{"title":"Restore Errors","type":0,"sectionRef":"#","url":"/Articles/Veeam/Veeam Backup for O365/Restore Errors","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Failing to open mailbox​","type":1,"pageTitle":"Restore Errors","url":"/Articles/Veeam/Veeam Backup for O365/Restore Errors#1-failing-to-open-mailbox","content":""},{"title":"1.1. Scenario​","type":1,"pageTitle":"Restore Errors","url":"/Articles/Veeam/Veeam Backup for O365/Restore Errors#11-scenario","content":"Your Veeam Backup for Office 365 solution is pretty new and it's being tested or you've a member of your team who always gets this error for some reason. "},{"title":"1.2. The error​","type":1,"pageTitle":"Restore Errors","url":"/Articles/Veeam/Veeam Backup for O365/Restore Errors#12-the-error","content":"Failed to access mailbox. Mailbox does not exist. This issue mostly presents that error when you're using Modern Authentication. "},{"title":"1.3. Solution​","type":1,"pageTitle":"Restore Errors","url":"/Articles/Veeam/Veeam Backup for O365/Restore Errors#13-solution","content":"It turns out that in order to restore objects the user who authenticates to do the restore action must have the impersonation role, this is a custom role that you need to create via command line.  "},{"title":"Sending Logs to Log Analytics","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Intune/Sending Logs to Log Analytics","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1.1. Logs that can be ingested​","type":1,"pageTitle":"Sending Logs to Log Analytics","url":"/Articles/Microsoft/Intune/Sending Logs to Log Analytics#11-logs-that-can-be-ingested","content":"Microsoft Intune includes built-in logs that provide information about your environment: Audit Logs shows a record of activities that generate a change in Intune, including create, update (edit), delete, assign, and remote actions.Operational Logs show details on users and devices that successfully (or failed) to enroll, and details on non-compliant devices.Device Compliance Organizational Logs show an organizational report for device compliance in Intune, and details on non-compliant devices.IntuneDevices show device inventory and status information for Intune enrolled and managed devices. "},{"title":"1.2. Notes​","type":1,"pageTitle":"Sending Logs to Log Analytics","url":"/Articles/Microsoft/Intune/Sending Logs to Log Analytics#12-notes","content":""},{"title":"1.2.1. Benefits​","type":1,"pageTitle":"Sending Logs to Log Analytics","url":"/Articles/Microsoft/Intune/Sending Logs to Log Analytics#121-benefits","content":"The main benefit of using Log Analytics is the visualisation, monitoring, and alerting on the connected data.Archive the data to review at a later date.Stream the logs into Azure Event hub for review in other 3rd party tools. "},{"title":"1.2.2. Cons (Sort of)​","type":1,"pageTitle":"Sending Logs to Log Analytics","url":"/Articles/Microsoft/Intune/Sending Logs to Log Analytics#122-cons-sort-of","content":"All of the above logs can be found within the Intune portal, login to EndPoint Manager (Intune) &gt; Devices &gt; Monitor. Audit Logs - login to EndPoint Manager (Intune) &gt; Devices &gt; Monitor &gt; Other &gt; Device actions.Operational Logs - login to EndPoint Manager (Intune) &gt; Devices &gt; Monitor &gt; Enrollment &gt; Enrollment Failures .and login to EndPoint Manager (Intune) &gt; Devices &gt; Monitor &gt; Compliance &gt; Noncompliant devices.Device Compliance Organizational Logs - login to EndPoint Manager (Intune) &gt; Reports &gt; Device compliance.IntuneDevices - login to EndPoint Manager (Intune) &gt; Devices &gt;All Devices. "},{"title":"Setup sending data​","type":1,"pageTitle":"Sending Logs to Log Analytics","url":"/Articles/Microsoft/Intune/Sending Logs to Log Analytics#setup-sending-data","content":"Microsoft link to instructions to set this up. "},{"title":"Cost estimations and Dependancies​","type":1,"pageTitle":"Sending Logs to Log Analytics","url":"/Articles/Microsoft/Intune/Sending Logs to Log Analytics#cost-estimations-and-dependancies","content":"Microsoft link - Storage size for activity logs. "},{"title":"Managing Backup Jobs","type":0,"sectionRef":"#","url":"/Articles/Veeam/Veeam Backup for O365/Managing Backup Jobs","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Before you begin​","type":1,"pageTitle":"Managing Backup Jobs","url":"/Articles/Veeam/Veeam Backup for O365/Managing Backup Jobs#1-before-you-begin","content":"Veeam best practice guide link, here.Veeam User guide link, here. "},{"title":"2. Recommendations​","type":1,"pageTitle":"Managing Backup Jobs","url":"/Articles/Veeam/Veeam Backup for O365/Managing Backup Jobs#2-recommendations","content":""},{"title":"2.1. Split-up the jobs​","type":1,"pageTitle":"Managing Backup Jobs","url":"/Articles/Veeam/Veeam Backup for O365/Managing Backup Jobs#21-split-up-the-jobs","content":"This was a recommendation from the good folks at Veeam. Try to split the jobs based on size being backed up. An example of a suggestion below. Create a single job to capture anything that is new.If you've got loads of small SharePoint sites, split them into chunks as these will take a long time to backup. A few thousand of these will take hours to backup. For example, take the largest 10 sites and put them in their own jobs.The SharePoint backup job will also back personal sites as well, no need to include the personal sites in the other jobs. "},{"title":"2.2. Server resources & Backup App Registrations​","type":1,"pageTitle":"Managing Backup Jobs","url":"/Articles/Veeam/Veeam Backup for O365/Managing Backup Jobs#22-server-resources--backup-app-registrations","content":"Both resources (CPU &amp; RAM) play a major role in the performance of the proxy server. Make sure you don't go beneath 4vCPUs &amp; 16GB of RAM, below this and you'll start to see a noticable time incrase in backups.For the moment you can add more backup applications into Azure AD, that increases the amount of requests that can be made to the Office 365 resources. The more backup applications you have the quicker you'll exhaust the amount of requests that can be made per minute by the VBO solution to backup the data. "},{"title":"2.3. Microsoft Throttling​","type":1,"pageTitle":"Managing Backup Jobs","url":"/Articles/Veeam/Veeam Backup for O365/Managing Backup Jobs#23-microsoft-throttling","content":"After speaking with Microsoft, they no longer change the throttling limits upon request.You're limited due to the size of your organisation and amount of users, check out the link below for more information on throttling. Microsoft Link - Avoid getting throttled or blocked in SharePoint Online. "},{"title":"3. Object Management​","type":1,"pageTitle":"Managing Backup Jobs","url":"/Articles/Veeam/Veeam Backup for O365/Managing Backup Jobs#3-object-management","content":"Setup an Azure AD group to capture user objects that need to be excluded from the backups.Microsoft 365 Groups require an owner to be backed up, otherwise they'll generate warnings in your jobs. "},{"title":"Setup an Azure Subscription from Partner Centre","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Microsoft Partner Centre/Setup an Azure Subscription from Partner Centre","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1.1. Before you begin​","type":1,"pageTitle":"Setup an Azure Subscription from Partner Centre","url":"/Articles/Microsoft/Microsoft Partner Centre/Setup an Azure Subscription from Partner Centre#11-before-you-begin","content":"Who'll manage this subscription? If it's being setup with the CSP in mind, it'll be the CSP. Who'll be supporting this subscription? Will it be added to BAU.What Groups and\\or accounts need to manage it, (Owner, Contributor, Reader). "},{"title":"1.2. Setup Process​","type":1,"pageTitle":"Setup an Azure Subscription from Partner Centre","url":"/Articles/Microsoft/Microsoft Partner Centre/Setup an Azure Subscription from Partner Centre#12-setup-process","content":"Microsoft Link. Sign in to the Azure portal using your Partner Center account.Make sure you are in your Partner Center directory (tenant), not a customer’s tenant.Navigate to Cost Management + Billing.Select the Billing scope for your billing account where the customer account resides.In the left menu under Billing, select Customers.On the Customers page, select the customer. If you have only one customer, the selection is unavailable.In the left menu, under Products + services, select All billing subscriptions.On the Azure subscription page, select + Add to create a subscription.Then select the type of subscription to add. For example, Usage based/ Azure subscription.On the Basics tab, enter a subscription name.Select the partner's billing account.Select the partner's billing profile.Select the customer that you're creating the subscription for and, if applicable, select a reseller.Next to Plan, select Microsoft Azure Plan for DevTest, if the subscription will be used for development or testing workloads. Otherwise, select Microsoft Azure Plan.Optionally, select the Tags tab and then enter tag pairs for Name and Value.Select Review + create. You should see a message stating Validation passed.Verify that the subscription information is correct, then select Create. You'll see a notification that the subscription is getting created. The customer will see the new subscription appear for them within 60 minutes, they may need to amend the subscription filter to see the new sub. If the end user you're testing with is not in the root managemnt group, you'll need to grant them a role over the Subscription before they can see it. "},{"title":"Setup Azure Backup","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Azure Resources Management/Setup Azure Backup","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Create the below resources in the FW-Azure Production subscription​","type":1,"pageTitle":"Setup Azure Backup","url":"/Articles/Microsoft/Azure Resources Management/Setup Azure Backup#1-create-the-below-resources-in-the-fw-azure-production-subscription","content":"info Use whatever naming conention fits in with what's being used already, I am just suggesting something here. Create the resource group, for example, rg-&lt;customername&gt;-&lt;region&gt;-&lt;prod/dev&gt;-backups-01.Create a recovery services vault to store the backups (GRS is the preferred option, LRS for lowest cost), for example, rsv-&lt;customername&gt;-&lt;region&gt;-&lt;prod/dev&gt;-backup-01.Create a log analytics workspace or reuse another one, for example, la-&lt;customername&gt;-&lt;region&gt;-&lt;prod/dev&gt;-backup-01. "},{"title":"2. Configure Backup Policy​","type":1,"pageTitle":"Setup Azure Backup","url":"/Articles/Microsoft/Azure Resources Management/Setup Azure Backup#2-configure-backup-policy","content":"Configure the backup policy in-line with whatever standard is being used already, my suggestions are below. In the Azure portal, select a Recovery Services vault to back up the VM.Under Backup, select Backup Policies.Click +Add.On Select policy type, select Azure Virtual Machine.On Create policy, perform the following actions: Policy sub type: StandardSuggested Name format: Bkup-policy-&lt;time of day&gt;-&lt;policy type&gt; (example name: bkup-policy-nightly-std).  "},{"title":"3. Configure Alerting​","type":1,"pageTitle":"Setup Azure Backup","url":"/Articles/Microsoft/Azure Resources Management/Setup Azure Backup#3-configure-alerting","content":"tip Note that this method is using the old backup alerting method, this is being replaced by Azure Monitor. Microsoft Link for more information Configure diagnostic logs to be sent from Azure Backup to the Log Anlytics workspace above. From the Recovery services vault just setup. Click on Backup Alerts, under the Monitoring section.Click Configure Notifications. Enable Notifications: YesRecipients(Email): monitoring@DomainName.comNotify: Hourly digestSeverity: Critical &amp; Warning Example of this below. "},{"title":"4. Configure Diagnostic log collection​","type":1,"pageTitle":"Setup Azure Backup","url":"/Articles/Microsoft/Azure Resources Management/Setup Azure Backup#4-configure-diagnostic-log-collection","content":"Configure diagnostic logs to be sent from Azure Backup to the Log Anlytics workspace above. Navigate to Diagnostic settings under Monitoring.Click Add Diagnostic Settings.Name your diagnostic setting, something informational, for example, &quot;AzBkup-Diagnostics&quot;, suggestion, Backup Report Data.Select Send to Log Analytics Workspace.Add a workspace and don't touch any other settings.Hit Save. tip Make sure to run the initial backup job from the Azure Backup Dashboard. "},{"title":"Assign Managed Identity permissions","type":0,"sectionRef":"#","url":"/Articles/PowerShell/Assign Managed Identity permissions","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. The command​","type":1,"pageTitle":"Assign Managed Identity permissions","url":"/Articles/PowerShell/Assign Managed Identity permissions#1-the-command","content":" # Your tenant id. $TenantID=&quot;Add your tenant ID&quot; # Microsoft Graph App ID (DON'T CHANGE). $GraphAppId = &quot;00000003-0000-0000-c000-000000000000&quot; # Name of the manage identity (same as the Logic App name). $DisplayNameOfMSI=&quot;Add display name of Enterprise App&quot; # Check the Microsoft Graph documentation for the permission you need for the operation. $PermissionName = &quot;Add your permission here&quot; # Install the module (You need admin on the machine) Install-Module AzureAD # Connect to Azure AD via tenant ID, you'll need an admin account to login with though. Connect-AzureAD -TenantId $TenantID # Collects the Target System Managed Identities information into the MSI variable. $MSI = (Get-AzureADServicePrincipal -Filter &quot;displayName eq '$DisplayNameOfMSI'&quot;) Start-Sleep -Seconds 10 # Store the Microsoft Graph API informaiton into the GraphServicePrincipal variable. $GraphServicePrincipal = Get-AzureADServicePrincipal -Filter &quot;appId eq '$GraphAppId'&quot; # Searches Microsoft Graph API for the value matching the PermissionName variable populated above and stores this in the AppRole Variable. $AppRole = $GraphServicePrincipal.AppRoles | Where-Object {$_.Value -eq $PermissionName -and $_.AllowedMemberTypes -contains &quot;Application&quot;} # Assigned the permission from the Microsoft Graph API to the target Managed Identity. New-AzureADServiceAppRoleAssignment -ObjectId $MSI.ObjectId -ResourceId $GraphServicePrincipal.ObjectId -Id $appRole.Id -PrincipalId $MSI.ObjectId  Annotated the hell out of it as the command really confused me. "},{"title":"2. Notes​","type":1,"pageTitle":"Assign Managed Identity permissions","url":"/Articles/PowerShell/Assign Managed Identity permissions#2-notes","content":"It takes a few minutes for this change to show in the GUI.If the permission already exists the promtp will error on the final command. "},{"title":"Resource Creation Cheatsheet","type":0,"sectionRef":"#","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Before you begin​","type":1,"pageTitle":"Resource Creation Cheatsheet","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet#1-before-you-begin","content":"info This information is down to personal experience and issues that I have come across when dealing with a customer requesting a new resource. Define the workload, this will help understand the size of the resource needed, consider growth over time as well.Costing, be prepared to provide estimates and justify the need to your solution; pay as you go is all well and good but, it can mount up quick.Consider dependancies before you starting the build, for example: Do you need a new Subscription?Do you need to create a Resources Group?Network Connectivity, do you need a private endpoint and network connectivity? Do you need people to connect externally to the resources? Monitoring and Alerting, what needs setting,?Backups, do you need them\\it?Security, what features need to be enabled?Resiliency, does the resource and depedant resources need to be resilient?Tags, tags are useful for billing, reporting and segregating resources. Suggested naming conventions here. Data Sovereignty, no good setting up resiliency to a region outside of the customer location if it's not allowed to be there!Estimate build time and get approval to create any resources.Testing, consider as well, how you will test out the build. Do you have test data to migrate as part of this work? "},{"title":"2. Other recommendations​","type":1,"pageTitle":"Resource Creation Cheatsheet","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet#2-other-recommendations","content":""},{"title":"2.1. Naming Conventions​","type":1,"pageTitle":"Resource Creation Cheatsheet","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet#21-naming-conventions","content":"tip The below bullet points apply to the Subsciption, Resource Group and the SQL resource. Almost nothing in Azure can be renamed after creation. You'll have to delete and start over. Names must be in lowercase, Azure does not support uppercase names. Name objects appropriately based on it's purpose. If it hosts production resources, include Production\\Prod in the name.If it hosts developement resources, include Development\\Dev in the name.If it hosts resources for a particular application or solution, include that app or solution name.Example naming convention, &quot;Company&quot;-&quot;environment type&quot;-&quot;Region&quot;-&quot;Resource information&quot;. "},{"title":"Size and Sku​","type":1,"pageTitle":"Resource Creation Cheatsheet","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet#size-and-sku","content":"Triple check the sizes available using the Azure portal, the Azure pricing calculator has no awareness of what is actaully available in a region. "},{"title":"2.2. Resource grouping​","type":1,"pageTitle":"Resource Creation Cheatsheet","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet#22-resource-grouping","content":"Resources within Resource Groups should share the same product life cycle.Many resources cannot be moved between groups after they've been created.Example naming convention, &quot;Company&quot;-&quot;environment type&quot;-&quot;Region&quot;-&quot;Resource information&quot;. "},{"title":"2.4. Monitoring​","type":1,"pageTitle":"Resource Creation Cheatsheet","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet#24-monitoring","content":"You can create Alerts in the Azure portal much like any other resource. You'll be required to pick from the &quot;suggested&quot; metrics. Microsoft docs link - Create alerts for Azure SQL Database.You can monitor SQL Databases with Azure Monitor, Microsoft docs link - Monitor Azure SQL Database with Azure Monitor. "},{"title":"Resource Specific Notes​","type":1,"pageTitle":"Resource Creation Cheatsheet","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet#resource-specific-notes","content":""},{"title":"Azure SQL Server and Database​","type":1,"pageTitle":"Resource Creation Cheatsheet","url":"/Articles/Microsoft/Azure Resources Management/Resource Creation Cheatsheet#azure-sql-server-and-database","content":"Authentication method, where apprproate, use both SQL and Azure AD, that covers both sides unless the user specifies otherwise.Network Connectivity, this can be a bit of a mess for SQL servers and Databases in Azure, I'd suggest digging into this a bit to see what fits best for your deplyment. By default, the databse\\sql server will be contactable by any resource in your Azure tenant provided it's not on a VNet already. External connectivity can be done through the network settings on the resource as is basically direct connect if no Private endpoint is setup. "},{"title":"Deploying Resources","type":0,"sectionRef":"#","url":"/CheatSheets/Bicep/Deploying Resources","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Deploy using AzCmdLet (PowerShell)​","type":1,"pageTitle":"Deploying Resources","url":"/CheatSheets/Bicep/Deploying Resources#deploy-using-azcmdlet-powershell","content":"New-AzResourceGroupDeployment, adds an Azure deployment to a resource group, for example, New-AzResourceGroupDeployment -TemplateFile main.bicep. New-AzResourceGroupDeployment -ResourceGroupName &quot;ContosoEngineering&quot; -TemplateFile &quot;location&quot; -Tag @{&quot;key1&quot;=&quot;value1&quot;; &quot;key2&quot;=&quot;value2&quot;;}  "},{"title":"Bicep code snippets","type":0,"sectionRef":"#","url":"/Code Snippets/Bicep","content":"Bicep code snippets","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Azure Active Directory","type":0,"sectionRef":"#","url":"/Code Snippets/Azure Active Directory","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Connection​","type":1,"pageTitle":"Azure Active Directory","url":"/Code Snippets/Azure Active Directory#1-connection","content":"Commands relating to connecting to the Azure CLi Command\tDescriptionaz login\tLogin to Azure tenant az account set --subscription &lt;subscription ID&gt;\tSet the scope for the session. "},{"title":"2. Object Management​","type":1,"pageTitle":"Azure Active Directory","url":"/Code Snippets/Azure Active Directory#2-object-management","content":"Command\tDescriptionaz group list --output table\tList resource groups as a table. az group create --name exampleRG --location eastus\tCreate a resource group, with a name and location. "},{"title":"3. Deployment​","type":1,"pageTitle":"Azure Active Directory","url":"/Code Snippets/Azure Active Directory#3-deployment","content":"Command\tDescriptionaz deployment list --output table\tList of deployments. az deployment group create --resource-group exampleRG --template-file main.bicep --parameters storageName=uniquename\tDeploy storage account into an existing Resource Group. "},{"title":"4. Delete Resources​","type":1,"pageTitle":"Azure Active Directory","url":"/Code Snippets/Azure Active Directory#4-delete-resources","content":"Command\tDescriptionaz group delete --resource-group &lt;group name&gt;\tDelete resource group. "},{"title":"1. Exchange Online Commands","type":0,"sectionRef":"#","url":"/Code Snippets/Exchange Online","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1.1. Get-Calendar Permissions​","type":1,"pageTitle":"1. Exchange Online Commands","url":"/Code Snippets/Exchange Online#11-get-calendar-permissions","content":"# Manually connect to Exchange Online. Connect-ExchangeOnline # Get all User Mailboxes. $userObject = Get-Mailbox -RecipientTypeDetails UserMailbox | select UserPrincipalName # Single mailbox command. # Get-MailboxFolderPermission -Identity Ryan.Wilson@traderemedies.gov.uk:\\Calendar -User Default | ft # Loop through each user and get calendar permissions of the default user. foreach($user in $userObject){ $calendar = $user.UserPrincipalName+&quot;:\\Calendar&quot; Get-MailboxFolderPermission -Identity $calendar | Export-csv -Append $env:USERPROFILE\\Downloads\\calendar-perms.csv }  "},{"title":"1.2. Set-Calendar permssions​","type":1,"pageTitle":"1. Exchange Online Commands","url":"/Code Snippets/Exchange Online#12-set-calendar-permssions","content":"# Manually connect to Exchange Online. Connect-ExchangeOnline # Get all User Mailboxes. $userObject = Get-Mailbox -RecipientTypeDetails UserMailbox | select UserPrincipalName # Single mailbox command. # Set-MailboxFolderPermission -Identity firstname.Lastname@fordway.com:\\Calendar -User Default -AccessRights LimitedDetails # Loop through each user and set calendar permissions of the default user. foreach($user in $userObject){ $calendar = $user.UserPrincipalName+&quot;:\\Calendar&quot; Set-MailboxFolderPermission -Identity $calendar -User Default -AccessRights LimitedDetails }  "},{"title":"1. Manging On-Prem Active Directory via PowerShell","type":0,"sectionRef":"#","url":"/Code Snippets/OnPrem Active Directory","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1.1. Get-ADUser: Filter by attribute​","type":1,"pageTitle":"1. Manging On-Prem Active Directory via PowerShell","url":"/Code Snippets/OnPrem Active Directory#11-get-aduser-filter-by-attribute","content":"# Filter mail address is like &amp; the user has to be enabled. Get-ADUser -Filter &quot;Mail -like '*@&lt;domain&gt;co.uk' -and enabled -eq '$true'&quot; | Select Name, UserPrincipalname # Fitler where user is disabled. Get-ADUser -Filter 'enabled -eq $false' | Select name, DistinguishedName  "},{"title":"1.2. Get password last reset time​","type":1,"pageTitle":"1. Manging On-Prem Active Directory via PowerShell","url":"/Code Snippets/OnPrem Active Directory#12-get-password-last-reset-time","content":"# Collect all users, searching for the passlastset property, select the objects Name and Password Last Set, Export to a local appdata folder. Get-ADUser -filter * -properties PasswordLastSet | Select-Object Name, PasswordLastSet | Export-csv -Path $env:USERPROFILE\\PwdLastResetTime.csv # Similar to above but, foramtting into a table. Get-ADUser -filter * -properties PwdLastSet,PasswordLastSet | Format-Table Name,@{Name='PwdLastSet';Expression={[DateTime]::FromFileTime($_.PwdLastSet)}},PasswordLastSet | out-file -filepath $env:USERPROFILE\\PwdLastResetTimePwdLastResetTime.txt  "},{"title":"Welcome to the Wiki","type":0,"sectionRef":"#","url":"/Welcome","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"How the site works​","type":1,"pageTitle":"Welcome to the Wiki","url":"/Welcome#how-the-site-works","content":"The website is stored within a GitHub Repo, this is then copied over to a Static Web App hosted in Azure using a GitHub action.The site is generated using Docusaurus, big shout to them for making this incredible beast! "},{"title":"Navigating the Wiki​","type":1,"pageTitle":"Welcome to the Wiki","url":"/Welcome#navigating-the-wiki","content":"Naviagte using the navbar on the left hand side.There is a search bar in the top right, try searching keywords for what you're after. "},{"title":"Guides​","type":1,"pageTitle":"Welcome to the Wiki","url":"/Welcome#guides","content":"Are deep dives into setting up certain technologies or solutions. "},{"title":"Articles​","type":1,"pageTitle":"Welcome to the Wiki","url":"/Welcome#articles","content":"Are help docs or small snippets of information.I'd recommend using the search bar in the top right to search for related information. "},{"title":"Tooling​","type":1,"pageTitle":"Welcome to the Wiki","url":"/Welcome#tooling","content":"Are notes on tools that I use day to day in my job and at home that I think are cool. "},{"title":"Contact Me​","type":1,"pageTitle":"Welcome to the Wiki","url":"/Welcome#contact-me","content":"You can reach me at the below email address should you want to. WillH@theitkb.co.uk "},{"title":"Prettier Terminal Window","type":0,"sectionRef":"#","url":"/Tooling/Prettier Terminal Window","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Install the Windows Terminal App​","type":1,"pageTitle":"Prettier Terminal Window","url":"/Tooling/Prettier Terminal Window#install-the-windows-terminal-app","content":"Download it free from the Microsoft store, once installed run the terminal application. If you're doing this on a domain joined machine, you'll need to run the terminal application on both the user account and the administrator account to create the profiles. "},{"title":"Install OH-MY-POSH​","type":1,"pageTitle":"Prettier Terminal Window","url":"/Tooling/Prettier Terminal Window#install-oh-my-posh","content":"Follow these instructions for Windows machines, this is the official website. I recommend using winget via PowerShell to get the stuff. winget install JanDeDobbeleer.OhMyPosh -s winget  "},{"title":"Download fonts from Nerd Fonts​","type":1,"pageTitle":"Prettier Terminal Window","url":"/Tooling/Prettier Terminal Window#download-fonts-from-nerd-fonts","content":"These are some instructions from the Oh My Posh site to do this. In your terminal prompt, type oh-my-posh font install, this should then install the on my posh font. Next you need to configure the Terminal app to use the new font. You can edit the JSON file or you can do it in the GUI by clicking on the down arrow next to your open tab in Terminal. Click Settings, then click Defaults and click Appearance. Click on the font list next to the option, Font Face, select the Oh my posh font. "},{"title":"Edit the PowerShell profile​","type":1,"pageTitle":"Prettier Terminal Window","url":"/Tooling/Prettier Terminal Window#edit-the-powershell-profile","content":"Check out this link for the source matierial for the below Edit your PowerShell profile script, you can find its location under the $PROFILE variable in your preferred PowerShell version. For example, using notepad, notepad $PROFILE. If the command errors, you will need to create the profiel first, New-Item -Path $PROFILE -Type File -Force. Inside your profile, add the following line into it. oh-my-posh init pwsh --config 'C:/Users/Posh/jandedobbeleer.omp.json' | Invoke-Expression  If you want to change the theme, navigate to the theme folder, if you don't know where that is, enter the following command (Get-Command oh-my-posh).Source. "},{"title":"Other suggestions​","type":1,"pageTitle":"Prettier Terminal Window","url":"/Tooling/Prettier Terminal Window#other-suggestions","content":""},{"title":"Install PSReadLine​","type":1,"pageTitle":"Prettier Terminal Window","url":"/Tooling/Prettier Terminal Window#install-psreadline","content":"This module shows autocomplete suggestions based on the recent commands you've run, it's a great addition. Reference blog post from the Microsoft DevBlogs. Install the module, Install-Module PSReadLine. You need version 2.1.0 or higher for this to work properly. Enable Predictive IntelliSense by running this command, Set-PSReadLineOption -PredictionSource History, you should then start to see grey text in your PowerShell prompt that's running currently. The default key binding to use the prediction is right-arrow. You can change the color for those predictions by using the following commands. Set-PSReadLineOption -Colors @{ InlinePrediction = '#8A0303'} # This is dark red. Set-PSReadLineOption -Colors @{ InlinePrediction = '#2F7004'} # This is a dark green. # This will set it back to default. Set-PSReadLineOption -Colors @{ InlinePrediction = &quot;$([char]0x1b)[36;7;238m&quot;}  Make sure to update your PowerShell profile to load this module. Type notepad $profile into your terminal window, this should load your profile into notepad. Paste in the following lines. Set-PSReadLineOption -PredictionSource History Set-PSReadLineOption -PredictionViewStyle ListView  "},{"title":"1. Random snippets of useful code","type":0,"sectionRef":"#","url":"/Code Snippets/Miscellaneous Code","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1.1. Direct Send to email​","type":1,"pageTitle":"1. Random snippets of useful code","url":"/Code Snippets/Miscellaneous Code#11-direct-send-to-email","content":"# Get the credential $credential = Get-Credential ## Define the Send-MailMessage parameters $mailParams = @{ SmtpServer = 'smtp.office365.com' Port = '587' # or '25' if not using TLS UseSSL = $true ## or not if using non-TLS Credential = $credential From = 'Email.Address@domain.com' To = 'Email.Address@domain.com'# , 'recipient@NotYourDomain.com' Subject = &quot;SMTP Client Submission - $(Get-Date -Format g)&quot; Body = 'This is a test email using SMTP Client Submission' Attachment = &quot;$env:USERPROFILE\\Desktop\\TRA-Backup-Job-Report.csv&quot; DeliveryNotificationOption = 'OnFailure', 'OnSuccess' } ## Send the message Send-MailMessage @mailParams  "},{"title":"1.2. Store encrypted credentials​","type":1,"pageTitle":"1. Random snippets of useful code","url":"/Code Snippets/Miscellaneous Code#12-store-encrypted-credentials","content":"Try the section above in conjuction with this to store the credentials for the account that is sending the email. &lt;# Set and encrypt credentials to file using default method #&gt; $credential = Get-Credential $credential.Password | ConvertFrom-SecureString | Set-Content &quot;C:\\temp\\Reporting\\encrypted_password_for_reporting.txt&quot; &lt;# Decrypting it and using it in a script#&gt; # Get the credential $emailusername = &quot;email.address@domain.com&quot; $encrypted = Get-Content &quot;C:\\temp\\encrypted_password_for_reporting.txt&quot; | ConvertTo-SecureString $credential = New-Object System.Management.Automation.PsCredential($emailusername, $encrypted)  "},{"title":"1.3. Remove-Variable​","type":1,"pageTitle":"1. Random snippets of useful code","url":"/Code Snippets/Miscellaneous Code#13-remove-variable","content":"Remove-Variable * -ErrorAction SilentlyContinue  "},{"title":"Managing Veeam Backup for O365 via Command Line","type":0,"sectionRef":"#","url":"/Code Snippets/Veeam Backup for O365","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Automation of backup reports​","type":1,"pageTitle":"Managing Veeam Backup for O365 via Command Line","url":"/Code Snippets/Veeam Backup for O365#automation-of-backup-reports","content":"$repository = Get-VBORepository -Name &quot;&quot; # Store Repository name. $reportPath = &quot;$env:USERPROFILE\\Report Name - $((Get-Date).ToString('yyyy-MM-dd'))\\Backup-Report.xlsx&quot; # Creates the report file and sets the file\\location into variable. $mailboxData = Get-VBOEntityData -Repository $repository -Type Mailbox | Select-Object Email, IsArchive, BackedUpTime | sort-object Email # User mailbox backup status. $oneDriveData = Get-VBOEntityData -Repository $repository -Type OneDrive | Select-Object DisplayName, Url, BackedUpTime | sort-object Title # OneDrive backup status. $spoData = Get-VBOEntityData -Repository $repository -Type Site | Where-Object {$_.Url -notlike &quot;*personal*&quot;} |Select-Object DisplayName, Url, BackedUpTime | sort-object Title # SPO site backup status. $dateRange = (get-date).AddDays(-7).Date # Set the date range to collect backup jobs from. $backupJobReport = Get-VBOJobSession -JobType Backup | Where-Object {$_.JobName -like &quot;enter filter&quot; -and $_.EndTime -gt $dateRange} | Select-Object JobName, Status, EndTime # Get last 30 days of the backup job sessions. $mailboxData | Export-Excel -WorkSheetName &quot;MailboxData&quot; -Path &quot;$reportPath&quot; $oneDriveData | Export-Excel -WorkSheetName &quot;OneDriveData&quot; -Path &quot;$reportPath&quot; $spoData | Export-Excel -WorkSheetName &quot;SharePointSiteData&quot; -Path &quot;$reportPath&quot; $backupJobReport | Export-Excel -WorkSheetName &quot;BackupJobData&quot; -Path &quot;$reportPath&quot; # Get the credential $emailusername = &quot;email.address@domain.com&quot; # Set the username for the account. $encrypted = Get-Content &quot;$env:USERPROFILE\\encrypted_password_for_reporting.txt&quot; | ConvertTo-SecureString # Decrypt the password file using the logged in account. $credential = New-Object System.Management.Automation.PsCredential($emailusername, $encrypted) # Creates new PS objects to store the above in. ## Define the Send-MailMessage parameters $mailParams = @{ SmtpServer = 'smtp.office365.com' Port = '587' # or '25' if not using TLS UseSSL = $true ## or not if using non-TLS Credential = $credential From = 'email.address@domain.com' To = 'email.address@domain.com'# , 'recipient@NotYourDomain.com' Subject = &quot;SMTP Client Submission - $(Get-Date -Format g)&quot; Body = 'This is a test email using SMTP Client Submission' Attachment = $reportPath DeliveryNotificationOption = 'OnFailure', 'OnSuccess' } ## Send the message Send-MailMessage @mailParams  "},{"title":"Export AAD Secrets and Certs","type":0,"sectionRef":"#","url":"/Articles/PowerShell/Export AAD Secrets and Certs","content":"Export AAD Secrets and Certs The script below was created originally by Microsoft, I will find the link where this came from. ################################################################################# #DISCLAIMER: This is not an official PowerShell Script. We designed it specifically for the situation you have encountered right now. #Please do not modify or change any preset parameters. #Please note that we will not be able to support the script if it is changed or altered in any way or used in a different situation for other means. #This code-sample is provided &quot;AS IT IS&quot; without warranty of any kind, either expressed or implied, including but not limited to the implied warranties of merchantability and/or fitness for a particular purpose. #This sample is not supported under any Microsoft standard support program or service.. #Microsoft further disclaims all implied warranties including, without limitation, any implied warranties of merchantability or of fitness for a particular purpose. #The entire risk arising out of the use or performance of the sample and documentation remains with you. #In no event shall Microsoft, its authors, or anyone else involved in the creation, production, or delivery of the script be liable for any damages whatsoever (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or other pecuniary loss) arising out of the use of or inability to use the sample or documentation, even if Microsoft has been advised of the possibility of such damages. ################################################################################# Connect-AzureAD $Applications = Get-AzureADApplication -all $true $Logs = @() foreach ($app in $Applications) { $AppName = $app.DisplayName $AppID = $app.objectid $ApplID = $app.AppId $AppCreds = Get-AzureADApplication -ObjectId $AppID | Select-Object PasswordCredentials, KeyCredentials $secret = $AppCreds.PasswordCredentials $cert = $AppCreds.KeyCredentials ############################################ $Log = New-Object System.Object $Log | Add-Member -MemberType NoteProperty -Name &quot;ApplicationName&quot; -Value $AppName $Log | Add-Member -MemberType NoteProperty -Name &quot;ApplicationID&quot; -Value $ApplID $Log | Add-Member -MemberType NoteProperty -Name &quot;Secret Start Date&quot; -Value $Null $Log | Add-Member -MemberType NoteProperty -Name &quot;Secret End Date&quot; -value $Null $Log | Add-Member -MemberType NoteProperty -Name &quot;Certificate Start Date&quot; -Value $Null $Log | Add-Member -MemberType NoteProperty -Name &quot;Certificate End Date&quot; -value $Null $Log | Add-Member -MemberType NoteProperty -Name &quot;Owner&quot; -Value $Null $Log | Add-Member -MemberType NoteProperty -Name &quot;Owner_ObjectID&quot; -value $Null $Logs += $Log ############################################ foreach ($s in $secret) { $StartDate = $s.StartDate $EndDate = $s.EndDate #$operation = $EndDate - $now #$ODays = $operation.Days $Owner = Get-AzureADApplicationOwner -ObjectId $app.ObjectId $Username = $Owner.UserPrincipalName -join &quot;;&quot; $OwnerID = $Owner.ObjectID -join &quot;;&quot; if ($owner.UserPrincipalName -eq $Null) { $Username = $Owner.DisplayName + &quot; **&lt;This is an Application&gt;**&quot; } if ($Owner.DisplayName -eq $null) { $Username = &quot;&lt;&lt;No Owner&gt;&gt;&quot; } $Log = New-Object System.Object $Log | Add-Member -MemberType NoteProperty -Name &quot;ApplicationName&quot; -Value $AppName $Log | Add-Member -MemberType NoteProperty -Name &quot;ApplicationID&quot; -Value $ApplID $Log | Add-Member -MemberType NoteProperty -Name &quot;Secret Start Date&quot; -Value $StartDate $Log | Add-Member -MemberType NoteProperty -Name &quot;Secret End Date&quot; -value $EndDate $Log | Add-Member -MemberType NoteProperty -Name &quot;Certificate Start Date&quot; -Value $Null $Log | Add-Member -MemberType NoteProperty -Name &quot;Certificate End Date&quot; -value $Null $Log | Add-Member -MemberType NoteProperty -Name &quot;Owner&quot; -Value $Username $Log | Add-Member -MemberType NoteProperty -Name &quot;Owner_ObjectID&quot; -value $OwnerID $Logs += $Log } foreach ($c in $cert) { $CStartDate = $c.StartDate $CEndDate = $c.EndDate #$COperation = $CEndDate - $now #$CODays = $COperation.Days $Owner = Get-AzureADApplicationOwner -ObjectId $app.ObjectId $Username = $Owner.UserPrincipalName -join &quot;;&quot; $OwnerID = $Owner.ObjectID -join &quot;;&quot; if ($owner.UserPrincipalName -eq $Null) { $Username = $Owner.DisplayName + &quot; **&lt;This is an Application&gt;**&quot; } if ($Owner.DisplayName -eq $null) { $Username = &quot;&lt;&lt;No Owner&gt;&gt;&quot; } $Log = New-Object System.Object $Log | Add-Member -MemberType NoteProperty -Name &quot;ApplicationName&quot; -Value $AppName $Log | Add-Member -MemberType NoteProperty -Name &quot;ApplicationID&quot; -Value $ApplID $Log | Add-Member -MemberType NoteProperty -Name &quot;Certificate Start Date&quot; -Value $CStartDate $Log | Add-Member -MemberType NoteProperty -Name &quot;Certificate End Date&quot; -value $CEndDate $Log | Add-Member -MemberType NoteProperty -Name &quot;Owner&quot; -Value $Username $Log | Add-Member -MemberType NoteProperty -Name &quot;Owner_ObjectID&quot; -value $OwnerID $Logs += $Log } } Write-host &quot;Add the Path you'd like us to export the CSV file to, in the format of &lt;C:\\Users\\&lt;USER&gt;\\Desktop\\Users.csv&gt;&quot; -ForegroundColor Green $Path = Read-Host $Logs | Export-CSV $Path -NoTypeInformation -Encoding UTF8 ","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Create an Automation Account","type":0,"sectionRef":"#","url":"/Guides/Automation in Azure/Create an Automation Account","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1. Outline​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#1-outline","content":"Setup the Resource Group and Automation Account.Setup the Identity for the Automation Account, this is key to running scripts gainst Azure Active Directoy and Office 365 resources. Create ourselves a Runbook, that sits inside the Automation Account. Install the relevant modules for the code we want to run.Write ourselves a little script. Setup a schedule for the Runbook. "},{"title":"2. Setup the Resource Group and Automation Account.​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#2-setup-the-resource-group-and-automation-account","content":"tip For naming conventions I'd suggest review my other article on it, Click here. Navigate to the Azure portal.Search for Automation Account in the search bar.Select the Automation Account option, Click create in the middle of the screen or Click +Add in the top left.Fill in the necessary information. Resource Group Name (Create one if needs be).Name.Region caution Make sure you Select the same region as the resources you want to query, if the account is to query something else, like Azure AD or Office 365, the region is not so important. Select the Advanced tab and Select the best option for you. System assigned, is attached to the automation account it lives and dies with the automation account resource.User assigned, is one you setup yourself in Azure AD and can be used by multiple resources and is completely seperate to your automation account. Click Review + Create to setup the resource. tip You'll need to assign Azure ADroles and App Permissions to the System or User managed Identity, Microsoft have decided not to make this easy and it needs to be done via command line, I've documented a script here to help with this "},{"title":"3. Setup Automation Runbook​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#3-setup-automation-runbook","content":"Sign in to the Azure portal.Search for and Select Automation Accounts.On the Automation Accounts page, Select your Automation account from the list.From the Automation account, Select Runbooks under Process Automation to open the list of runbooks.Click Create a runbook and fill in the information below. Name .Select its type.Select the Runtime versionEnter applicable Description Click Create to create the runbook. "},{"title":"4. Install any Modules​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#4-install-any-modules","content":"Sign in to the Azure portal.Search for and Select Automation Accounts.On the Automation Accounts page, Select your Automation account from the list.From the Automation account, Select Modules under Shared Resources. In here you can see a list of currently installed modules and you can add more by Clicking on the +Add a module button. tip You may find that you have to search around a bit for the module that you do actually want and when you do find the module you want, search for the command that you want to use, sometimes the module name is right but the command is missing! Microsoft Graph is probably the most well rounded module but, it's quite finicky to use, otherwise stick with the Az Command line. "},{"title":"5. Test Script​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#5-test-script","content":""},{"title":"5.1. Enter Script​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#51-enter-script","content":"Navigate to your runbook.Click Edit at the top.Here you can enter your script.On the left-hand side, the most useful thing is the CMDLETS option, which you can use to find commands from the installed modules. "},{"title":"5.2. Test Script​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#52-test-script","content":"Once your done and ready to test. Click on Test pane at the top.Click Start in the top left to being running the scrpt. In my experience The test window is not like a command promtp and will not output the commands running or anything at all apart from really confusing errors. Try to build error catching into your script, use the try, catch commands to write the errors to the promtp for debugging. More in this in the testing section at the bottom. I found it really hard to get my head around how this works for some reason. So expect that this may take quite a few tries to get right. Storage Account Key I'm aware that the storage account key is needed for this script, I'm planning on updating this with an example of where you do not need the key, I'll provided another version where it's not needed soon. # Ensures you do not inherit an AzContext in your runbook Disable-AzContextAutosave -Scope Process | Out-Null #Storage Account Information $StorageACCKey = &quot;Enter storage account key&quot; $ContainerName = &quot;Enter the blob container name&quot; # Connect using a Managed Service Identity try { Connect-AzAccount -Identity } catch{ Write-Output &quot;Unable to login. Aborting.&quot;; exit } $Users = Get-AzADUser | Select-Object DisplayName, Id, Mail, UserPrincipalName Write-Output $Users # Exports the data in the $Users variable into a local environmental variable that will store the information whilst running in the Automation account. $Users | Export-Csv &quot;$Env:temp\\Users.csv&quot; -notypeinformation # Creates a new context to enable connection to the storage account. $Context = New-AzureStorageContext -StorageAccountName &quot;whautomationfiledump&quot; -StorageAccountKey $StorageACCKey # This copes the csv file in the $Env:temp/MFAState.csv variable and copies it to the blob. Set-AzureStorageBlobContent -Context $Context -Container $ContainerName -File &quot;$Env:temp\\Users.csv&quot; -Blob &quot;Users.csv&quot; -force  tip If you need to output to a different storage type, such as an Azure files file share, just update the final line in the script and the variable at the top $ContainerName value. "},{"title":"6. Setup the Schedule​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#6-setup-the-schedule","content":"This has been mostly regurgitated from this Microsoft link here. From your Automation account, on the left-hand pane Select Schedules under Shared Resources.Select Add a schedule.Select whether the schedule runs once or on a reoccurring schedule by Selecting Once or Recurring. If you Select Once, specify a start time and then Select Create.If you Select Recurring, specify a start time. For Recur every, Select how often you want the runbook to repeat. Select by hour, day, week, or month. Press Create to complete. tip You must publish the runbook before you can assign the schedule to it. Head back to your Runbook.Select Link to schedule at the top.Click the option to Link a schedule to your runbook, Select the schedule you created from the list.Click OK to complete. Example schedule below  "},{"title":"7. Testing​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#7-testing","content":""},{"title":"7.1. Testing the script​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#71-testing-the-script","content":"7.1.1. Error handling​ The test pane window for the most part will not output useful errors or show you how the script is running. I'd suggest building error handling and status updates into your script if you wish during debugging, it will help immensely. An example of the try, catch command sytax is below. # Connect using a Managed Service Identity try { Connect-AzAccount -Identity } catch{ Write-Output &quot;Unable to login. Aborting.&quot;; exit }  I'd also suggest using write-output all over the place to confirm progress and variables etc. Shout out to the VS code module for Automation Accounts, it'll let you pull down the runbook contents and edit in VsCode and upload it again. "},{"title":"7.2. Confirm the data export​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#72-confirm-the-data-export","content":"Navigate to your storage account.Click on the File shares or Containers option, wherever you saved your data to.Click into the share\\container, find your file and Click on the 3 dots to the right of it. Click View\\edit, it should display a basic output of the file. "},{"title":"8. Further notes​","type":1,"pageTitle":"Create an Automation Account","url":"/Guides/Automation in Azure/Create an Automation Account#8-further-notes","content":"Run As accounts are being deprecated, this method is by far the easiest to use when trying to pull info from AzureAD and Office 365. "},{"title":"1. Bicep CheatSheet","type":0,"sectionRef":"#","url":"/CheatSheets/Bicep/Defining Resources","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1.1. Defining Resources​","type":1,"pageTitle":"1. Bicep CheatSheet","url":"/CheatSheets/Bicep/Defining Resources#11-defining-resources","content":"Example Bicep file. resource storageAccount 'Microsoft.Storage/storageAccounts@2022-09-01' = { name: 'toylaunchstorage' location: 'westus3' sku: { name: 'Standard_LRS' } kind: 'StorageV2' properties: { accessTier: 'Hot' } }  The resource keyword at the start tells Bicep that you're about to define a resource. Next, you give the resource a symbolic name. In the example, the resource's symbolic name is storageAccount. info Symbolic names are used within Bicep to refer to the resource, but they won't ever show up in Azure. Microsoft.Storage/storageAccounts@2022-09-01 is the resource type and API version of the resource. Microsoft.Storage/storageAccounts tells Bicep that you're declaring an Azure storage account. The date 2022-09-01 is the version of the Azure Storage API that Bicep uses when it creates the resource. You have to declare a resource name, which is the name the storage account will be assigned in Azure. You'll set a resource name using the name keyword. caution Resource names often have rules you must follow, like maximum lengths, allowed characters, and uniqueness across all of Azure. The requirements for resource names are different for each Azure resource type. You'll then set other details of the resource, such as its location,SKU (pricing tier), and kind. In this example, we're setting the storage account's access tier to Hot. tip There are also properties you can define that are different for each resource type. Different API versions might introduce different properties, too. "},{"title":"1.1.1. Resource Dependancies​","type":1,"pageTitle":"1. Bicep CheatSheet","url":"/CheatSheets/Bicep/Defining Resources#111-resource-dependancies","content":"You might have to extract some information from one resource to be able to define another. Or, if you're deploying a web application, you'll have to create the server infrastructure before you can add an application to it. These relationships are called dependencies. We need to deploy an App Service app for the template, before that can be done, we need to deploy an App Service Plan. Below we are deploying the App Service Plan. resource appServicePlan 'Microsoft.Web/serverFarms@2022-03-01' = { name: 'toy-product-launch-plan' location: 'westus3' sku: { name: 'F1' } }  Above we are deploying an App Service plan that has the resource type Microsoft.Web/serverFarms. The plan resource is named toy-product-launch-plan, and it's deployed into the West US 3 region. It uses a pricing SKU of F1, which is the free tier of App Service. Next, we must declare the App itself. resource appServiceApp 'Microsoft.Web/sites@2022-03-01' = { name: 'toy-product-launch-1' location: 'westus3' properties: { serverFarmId: appServicePlan.id httpsOnly: true } }  This template instructs Azure to host the app on the plan we just created. Notice that the definition of the plan includes the symbolic name of the App Service plan on this line: serverFarmId: appServicePlan.id. This line means that Bicep will get the App Service plan's resource ID using the id property. It's effectively saying, this app's server farm ID is the ID of the App Service plan defined earlier. tip In Azure, a resource ID is a unique identifier for each resource. The resource ID includes the Azure subscription ID, the resource group name, and the resource name, along with some other information. By declaring the app resource with a property that references the symbolic name of the plan, Azure understands the implicit dependency between the App Service app and the plan.  "},{"title":"1.2. Further Notes and Exercises​","type":1,"pageTitle":"1. Bicep CheatSheet","url":"/CheatSheets/Bicep/Defining Resources#12-further-notes-and-exercises","content":"Microsoft Learn link - Build your first Bicep template. "},{"title":"1. Manage Windows OS and Apps via Command Line","type":0,"sectionRef":"#","url":"/Code Snippets/Windows OS and Apps","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"1.1. Set office update channel​","type":1,"pageTitle":"1. Manage Windows OS and Apps via Command Line","url":"/Code Snippets/Windows OS and Apps#11-set-office-update-channel","content":"&lt;# Locate the office click to run installer, default location: cd C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun #&gt; cd &quot;C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun&quot; &lt;# Different channel options Current - Latest version. Deferred - Semi-Annual. #&gt; OfficeC2RClient.exe /changesetting Channel=Current OfficeC2RClient.exe /update user  "},{"title":"1.2. Time Stamped Ping​","type":1,"pageTitle":"1. Manage Windows OS and Apps via Command Line","url":"/Code Snippets/Windows OS and Apps#12-time-stamped-ping","content":"caution Not completely finished this script, may require some logic checks before useing. &lt;# Collect pings to various locations Confirm the destionations for the pings and substitute them into the lines of code below. Make sure to select both IP addresses and FQDNs for example, 8.8.8.8 is the Google public DNS IP, an FQDN would be a domain name or server name, wwww.google.com or FOR-AZ-DC01. #&gt; # Leave the two below, it's the ping to google DNS via IP and domain name, which will test internet connectivity and DNS resolution. Start-Job -ScriptBlock { test-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath $env:USERPROFILE\\Downloads\\Time_Stamp_Ping_Google_DNS_IP.txt} Start-Job -ScriptBlock { test-connection wwww.bbc.co.uk -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath $env:USERPROFILE\\Downloads\\Time_Stamp_Ping_Google_Domain_Name.txt} Get-Job Write-Host &quot;Wait a couple of minutes for these to complete, you should see the files in the downloads folder of the logged in user.&quot; Start-Sleep -Seconds 30 # Copy this line as required and make sure to update the sections where there are &lt;CAPS&gt;, delete the &lt;&gt; symbols too from the command. Start-Job -ScriptBlock { test-connection &quot;DESTINATION LOCATION&quot; -count &quot;ENTER HOW MANY TIMES YOU WANT THIS TO REPEAT&quot; | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath $env:USERPROFILE\\Downloads\\Time_Stamp_Ping_&lt;CHANGE ME TO SOMETHING MORE USEFUL&gt;.txt}  "},{"title":"1.3. Folder size report​","type":1,"pageTitle":"1. Manage Windows OS and Apps via Command Line","url":"/Code Snippets/Windows OS and Apps#13-folder-size-report","content":"$startFolder = &quot;C:\\FolderName&quot; $colItems = Get-ChildItem $startFolder | Where-Object {$_.PSIsContainer -eq $true} | Sort-Object foreach ($i in $colItems) { $subFolderItems = Get-ChildItem $i.FullName -recurse -force | Where-Object {$_.PSIsContainer -eq $false} | Measure-Object -property Length -sum | Select-Object Sum $i.FullName + ” — ” + “{0:N2}” -f ($subFolderItems.sum / 1GB) + ” GB” }  "},{"title":"1.4. Windows Device Troubleshooting​","type":1,"pageTitle":"1. Manage Windows OS and Apps via Command Line","url":"/Code Snippets/Windows OS and Apps#14-windows-device-troubleshooting","content":""},{"title":"1.4.1. Collect Azure AD Info​","type":1,"pageTitle":"1. Manage Windows OS and Apps via Command Line","url":"/Code Snippets/Windows OS and Apps#141-collect-azure-ad-info","content":"&lt;# Collect basic information useful in troubleshooting of a Windows device. #&gt; # Create folder for all files New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory Write-host 'Folder created at C:\\SystemDiagnosticCollection' #not finished yet, it'll print out only. Write-host 'Basic AAD Info' dsregcmd /status | select-string -Pattern 'Device Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'AzureADJoined' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'DeviceId' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'TenantName' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt write-host 'Single Sign on Info' dsregcmd /status | select-string -Pattern 'AzureAdPrt' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt dsregcmd /status | select-string -Pattern 'AzureAdPrtUpdateTime' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt dsregcmd /status | select-string -Pattern 'RefreshPrtDiagnostics' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt Write-host 'System Information' systeminfo | Select-String -Pattern 'OS Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'OS Version' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Original Install Date' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'System Boot Time' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Time Zone' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Total Physical Memory' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt  "},{"title":"1.4.2. Collect Device troubleshooting info​","type":1,"pageTitle":"1. Manage Windows OS and Apps via Command Line","url":"/Code Snippets/Windows OS and Apps#142-collect-device-troubleshooting-info","content":"&lt;# Script to collect machine information during troubleshooting &amp; save these into a zip file for engineer to extract. Information to collect: - Machine information. - Machine IP addressing information. - Recent event Logs (2 Hours) - Azure AD Join Status - Printer Info - Group Policy result #&gt; # Create folder for all files New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Collect System information systeminfo | Out-File -FilePath C:\\SystemDiagnosticCollection\\SystemInfo.txt Write-host 'System Info Collected' # Collect IP address information and connectivity tests ipconfig /all | Out-File -FilePath C:\\SystemDiagnosticCollection\\IpAddressingInfo.txt Write-host 'ipconfig ran successfully' # Test Connection to Google Test-NetConnection www.google.com -InformationLevel &quot;Detailed&quot; | Out-File -FilePath C:\\SystemDiagnosticCollection\\pingtoGoogle-FQDN.txt # Time Stamped Ping test test-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\SystemDiagnosticCollection\\PingtoGoogle-IP.txt Write-host 'Network Tests ran successfully' # Collect event log information # Collect System Logs Get-Eventlog -LogName System -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\System_Logs.csv -notype # Collect Application Logs Get-Eventlog -LogName Application -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\Application_Logs.csv -notype Write-host 'Successfully gathered Event Logs' # Collect Azure AD Joined Status information dsregcmd /status | Out-File -FilePath C:\\SystemDiagnosticCollection\\Hybrid-Joined-status.txt Write-host 'Successfully checked for Hybrid-Joined status' # Collect printer information Get-printer | Out-File -FilePath C:\\SystemDiagnosticCollection\\Printer-Info.txt Write-host 'Gathered Printer info' # Get Verbose GP Result gpresult /v | Out-file -FilePath C:\\SystemDiagnosticCollection\\GpResult.txt Write-host 'Gathered GPO status' # Compress to a Zip and copy to the Downloads folder of logged in user. Compress-Archive -Path C:\\SystemDiagnosticCollection C:\\SystemDiagnosticCollectio\\SystemDiagnostics.zip Write-host 'Zip file created within C:\\SystemDiagnosticCollection folder.'  "},{"title":"1.4.3. Collect Network troubleshooting info​","type":1,"pageTitle":"1. Manage Windows OS and Apps via Command Line","url":"/Code Snippets/Windows OS and Apps#143-collect-network-troubleshooting-info","content":"&lt;# Script to collect machine information during troubleshooting &amp; save these into a zip file for engineer to extract. Information to collect: - Ipconfig /all - timestamp ping to internet. - timestamp ping to gateway. - Network adapter information. #&gt; # Create folder for all files New-Item &quot;C:\\NetworkDiagnosticCollection&quot; -itemType Directory Write-host 'Folder created at C:\\NetworkDiagnosticCollection' # Collect network report, grab this from the depositied location, usually here, &quot;C:\\ProgramData\\Microsoft\\Windows\\WlanReport\\&quot;&quot;, Copy the whole folder to the C:\\NetworkDiagnosticCollection folder. netsh wlan show wlanreport Copy-Item -Path C:\\ProgramData\\Microsoft\\Windows\\WlanReport\\* -Destination C:\\NetworkDiagnosticCollection # Collect ipconfig information ipconfig /all | Out-File -FilePath C:\\NetworkDiagnosticCollection\\IpAddressingInfo.txt # Timestamped ping to internet test-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\NetworkDiagnosticCollection\\PingtoGoogle.txt test-connection 8.8.4.4 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\NetworkDiagnosticCollection\\PingtoGoogle2.txt Write-host 'Network Tests ran successfully' $ipconfig = ipconfig | Format-List write-output $ipconfig $GatewayIp = Read-host -prompt &quot;Enter Gateway IP address&quot; test-connection $GatewayIp -count 20 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\NetworkDiagnosticCollection\\PingtoGateway.txt # Get Network Adapater Information Get-NetAdapter | Format-List | Out-File -FilePath C:\\NetworkDiagnosticCollection\\NetworkAdapterInfo.txt Write-Host Saved network adapter settings successufully # Compress to a Zip and copy to the Downloads folder of logged in user. Compress-Archive -Path C:\\NetworkDiagnosticCollection C:\\NetworkDiagnosticCollection\\NetworkDiagnostics.zip Write-host 'Zip file created within C:\\NetworkDiagnosticCollection folder.'  "}]
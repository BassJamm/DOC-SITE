"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3746],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=o.createContext({}),c=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(a.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=i,g=p["".concat(a,".").concat(u)]||p[u]||m[u]||r;return n?o.createElement(g,l(l({ref:t},d),{},{components:n})):o.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[p]="string"==typeof e?e:i,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5142:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const r={sidebar_position:7,id:"Windows OS and Apps",title:"Windows OS and Apps",tags:["Command Line","PowerShell","CMD"]},l="1. Manage Windows OS and Apps via Command Line",s={unversionedId:"Code Snippets/Windows OS and Apps",id:"Code Snippets/Windows OS and Apps",title:"Windows OS and Apps",description:"1.1. Set office update channel",source:"@site/docs/Code Snippets/Windows OS and Apps.md",sourceDirName:"Code Snippets",slug:"/Code Snippets/Windows OS and Apps",permalink:"/Code Snippets/Windows OS and Apps",draft:!1,tags:[{label:"Command Line",permalink:"/tags/command-line"},{label:"PowerShell",permalink:"/tags/power-shell"},{label:"CMD",permalink:"/tags/cmd"}],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,id:"Windows OS and Apps",title:"Windows OS and Apps",tags:["Command Line","PowerShell","CMD"]},sidebar:"tutorialSidebar",previous:{title:"Veeam Backup for O365",permalink:"/Code Snippets/Veeam Backup for O365"},next:{title:"Tooling",permalink:"/category/tooling"}},a={},c=[{value:"1.1. Set office update channel",id:"11-set-office-update-channel",level:2},{value:"1.2. Time Stamped Ping",id:"12-time-stamped-ping",level:2},{value:"1.3. Folder size report",id:"13-folder-size-report",level:2},{value:"1.4. Windows Device Troubleshooting",id:"14-windows-device-troubleshooting",level:2},{value:"1.4.1. Collect Azure AD Info",id:"141-collect-azure-ad-info",level:3},{value:"1.4.2. Collect Device troubleshooting info",id:"142-collect-device-troubleshooting-info",level:3},{value:"1.4.3. Collect Network troubleshooting info",id:"143-collect-network-troubleshooting-info",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1-manage-windows-os-and-apps-via-command-line"},"1. Manage Windows OS and Apps via Command Line"),(0,i.kt)("h2",{id:"11-set-office-update-channel"},"1.1. Set office update channel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},'<# \nLocate the office click to run installer, default location: cd C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\n#>\n\ncd "C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun"\n\n<# \nDifferent channel options\nCurrent - Latest version.\nDeferred - Semi-Annual.\n#>\n\nOfficeC2RClient.exe /changesetting Channel=Current\nOfficeC2RClient.exe /update user\n')),(0,i.kt)("h2",{id:"12-time-stamped-ping"},"1.2. Time Stamped Ping"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Not completely finished this script, may require some logic checks before useing.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"<# Collect pings to various locations\nConfirm the destionations for the pings and substitute them into the lines of code below.\nMake sure to select both IP addresses and FQDNs for example, 8.8.8.8 is the Google public DNS IP, an FQDN would be a domain name or server name, wwww.google.com or FOR-AZ-DC01.\n#>\n\n# Leave the two below, it's the ping to google DNS via IP and domain name, which will test internet connectivity and DNS resolution.\nStart-Job -ScriptBlock { test-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath $env:USERPROFILE\\Downloads\\Time_Stamp_Ping_Google_DNS_IP.txt}\nStart-Job -ScriptBlock { test-connection wwww.bbc.co.uk -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath $env:USERPROFILE\\Downloads\\Time_Stamp_Ping_Google_Domain_Name.txt}\n\nGet-Job\nWrite-Host \"Wait a couple of minutes for these to complete, you should see the files in the downloads folder of the logged in user.\"\nStart-Sleep -Seconds 30\n\n# Copy this line as required and make sure to update the sections where there are <CAPS>, delete the <> symbols too from the command.\nStart-Job -ScriptBlock { test-connection \"DESTINATION LOCATION\" -count \"ENTER HOW MANY TIMES YOU WANT THIS TO REPEAT\" | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath $env:USERPROFILE\\Downloads\\Time_Stamp_Ping_<CHANGE ME TO SOMETHING MORE USEFUL>.txt}\n")),(0,i.kt)("h2",{id:"13-folder-size-report"},"1.3. Folder size report"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},'$startFolder = "C:\\FolderName"\n\n$colItems = Get-ChildItem $startFolder | Where-Object {$_.PSIsContainer -eq $true} | Sort-Object\nforeach ($i in $colItems) {\n$subFolderItems = Get-ChildItem $i.FullName -recurse -force | Where-Object {$_.PSIsContainer -eq $false} | Measure-Object -property Length -sum | Select-Object Sum\n$i.FullName + \u201d \u2014 \u201d + \u201c{0:N2}\u201d -f ($subFolderItems.sum / 1GB) + \u201d GB\u201d\n}\n')),(0,i.kt)("h2",{id:"14-windows-device-troubleshooting"},"1.4. Windows Device Troubleshooting"),(0,i.kt)("h3",{id:"141-collect-azure-ad-info"},"1.4.1. Collect Azure AD Info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"<#\nCollect basic information useful in troubleshooting of a Windows device.\n#>\n\n# Create folder for all files\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' #not finished yet, it'll print out only.\n\nWrite-host 'Basic AAD Info'\ndsregcmd /status | select-string -Pattern 'Device Name'  | Out-File -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'AzureADJoined' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'DeviceId' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'TenantName' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\n\nwrite-host 'Single Sign on Info'\ndsregcmd /status | select-string -Pattern 'AzureAdPrt' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\ndsregcmd /status | select-string -Pattern 'AzureAdPrtUpdateTime' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\ndsregcmd /status | select-string -Pattern 'RefreshPrtDiagnostics' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\n\nWrite-host 'System Information'\nsysteminfo | Select-String -Pattern 'OS Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'OS Version' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Original Install Date' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'System Boot Time' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Time Zone' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Total Physical Memory' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\n")),(0,i.kt)("h3",{id:"142-collect-device-troubleshooting-info"},"1.4.2. Collect Device troubleshooting info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"<# Script to collect machine information during troubleshooting & save these into a zip file for engineer to extract.\nInformation to collect:\n- Machine information.\n- Machine IP addressing information.\n- Recent event Logs (2 Hours)\n- Azure AD Join Status\n- Printer Info\n- Group Policy result\n#>\n\n# Create folder for all files\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection'\n\n# Collect System information\nsysteminfo | Out-File -FilePath C:\\SystemDiagnosticCollection\\SystemInfo.txt\nWrite-host 'System Info Collected'\n\n# Collect IP address information and connectivity tests\nipconfig /all | Out-File -FilePath C:\\SystemDiagnosticCollection\\IpAddressingInfo.txt\nWrite-host 'ipconfig ran successfully'\n\n# Test Connection to Google\nTest-NetConnection www.google.com -InformationLevel \"Detailed\" | Out-File -FilePath C:\\SystemDiagnosticCollection\\pingtoGoogle-FQDN.txt\n# Time Stamped Ping test\ntest-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\SystemDiagnosticCollection\\PingtoGoogle-IP.txt\nWrite-host 'Network Tests ran successfully'\n\n# Collect event log information\n\n# Collect System Logs\nGet-Eventlog -LogName System -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\System_Logs.csv -notype\n# Collect Application Logs\nGet-Eventlog -LogName Application -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\Application_Logs.csv -notype\nWrite-host 'Successfully gathered Event Logs'\n\n# Collect Azure AD Joined Status information\ndsregcmd /status | Out-File -FilePath C:\\SystemDiagnosticCollection\\Hybrid-Joined-status.txt\nWrite-host 'Successfully checked for Hybrid-Joined status'\n\n# Collect printer information\nGet-printer | Out-File -FilePath C:\\SystemDiagnosticCollection\\Printer-Info.txt\nWrite-host 'Gathered Printer info'\n\n# Get Verbose GP Result\ngpresult /v | Out-file -FilePath C:\\SystemDiagnosticCollection\\GpResult.txt\nWrite-host 'Gathered GPO status'\n\n# Compress to a Zip and copy to the Downloads folder of logged in user.\nCompress-Archive -Path C:\\SystemDiagnosticCollection C:\\SystemDiagnosticCollectio\\SystemDiagnostics.zip\nWrite-host 'Zip file created within C:\\SystemDiagnosticCollection folder.'\n")),(0,i.kt)("h3",{id:"143-collect-network-troubleshooting-info"},"1.4.3. Collect Network troubleshooting info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"<# Script to collect machine information during troubleshooting & save these into a zip file for engineer to extract.\nInformation to collect:\n- Ipconfig /all\n- timestamp ping to internet.\n- timestamp ping to gateway.\n- Network adapter information.\n#>\n\n# Create folder for all files\nNew-Item \"C:\\NetworkDiagnosticCollection\" -itemType Directory\nWrite-host 'Folder created at C:\\NetworkDiagnosticCollection'\n\n# Collect network report, grab this from the depositied location, usually here, \"C:\\ProgramData\\Microsoft\\Windows\\WlanReport\\\"\", Copy the whole folder to the C:\\NetworkDiagnosticCollection folder.\nnetsh wlan show wlanreport\nCopy-Item -Path C:\\ProgramData\\Microsoft\\Windows\\WlanReport\\* -Destination C:\\NetworkDiagnosticCollection\n\n# Collect ipconfig information\nipconfig /all | Out-File -FilePath C:\\NetworkDiagnosticCollection\\IpAddressingInfo.txt\n\n# Timestamped ping to internet\ntest-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\NetworkDiagnosticCollection\\PingtoGoogle.txt\ntest-connection 8.8.4.4 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\NetworkDiagnosticCollection\\PingtoGoogle2.txt\nWrite-host 'Network Tests ran successfully'\n\n$ipconfig = ipconfig | Format-List\nwrite-output $ipconfig\n$GatewayIp = Read-host -prompt \"Enter Gateway IP address\"\n\ntest-connection $GatewayIp -count 20 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\NetworkDiagnosticCollection\\PingtoGateway.txt\n\n# Get Network Adapater Information\nGet-NetAdapter | Format-List | Out-File -FilePath C:\\NetworkDiagnosticCollection\\NetworkAdapterInfo.txt\nWrite-Host Saved network adapter settings successufully\n\n# Compress to a Zip and copy to the Downloads folder of logged in user.\nCompress-Archive -Path C:\\NetworkDiagnosticCollection C:\\NetworkDiagnosticCollection\\NetworkDiagnostics.zip\nWrite-host 'Zip file created within C:\\NetworkDiagnosticCollection folder.'\n")))}p.isMDXComponent=!0}}]);
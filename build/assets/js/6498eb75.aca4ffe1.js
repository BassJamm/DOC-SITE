"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4439],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(a),d=n,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return a?r.createElement(f,i(i({ref:t},l),{},{components:a})):r.createElement(f,i({ref:t},l))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:n,i[1]=p;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7832:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:6,id:"Veeam Backup for O365",title:"Veeam Backup for O365",tags:["Veeam Backup for O365","Command Line","PowerShell"]},i="Managing Veeam Backup for O365 via Command Line",p={unversionedId:"Code Snippets/Veeam Backup for O365",id:"Code Snippets/Veeam Backup for O365",title:"Veeam Backup for O365",description:"Automation of backup reports",source:"@site/docs/Code Snippets/Veeam Backup for O365.md",sourceDirName:"Code Snippets",slug:"/Code Snippets/Veeam Backup for O365",permalink:"/Code Snippets/Veeam Backup for O365",draft:!1,tags:[{label:"Veeam Backup for O365",permalink:"/tags/veeam-backup-for-o-365"},{label:"Command Line",permalink:"/tags/command-line"},{label:"PowerShell",permalink:"/tags/power-shell"}],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,id:"Veeam Backup for O365",title:"Veeam Backup for O365",tags:["Veeam Backup for O365","Command Line","PowerShell"]},sidebar:"tutorialSidebar",previous:{title:"OnPrem Active Directory",permalink:"/Code Snippets/OnPrem Active Directory"},next:{title:"Windows OS and Apps",permalink:"/Code Snippets/Windows OS and Apps"}},s={},c=[{value:"Automation of backup reports",id:"automation-of-backup-reports",level:2}],l={toc:c};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"managing-veeam-backup-for-o365-via-command-line"},"Managing Veeam Backup for O365 via Command Line"),(0,n.kt)("h2",{id:"automation-of-backup-reports"},"Automation of backup reports"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell"},'$repository = Get-VBORepository -Name "" # Store Repository name.\n$reportPath = "$env:USERPROFILE\\Report Name - $((Get-Date).ToString(\'yyyy-MM-dd\'))\\Backup-Report.xlsx" # Creates the report file and sets the file\\location into variable.\n\n\n$mailboxData = Get-VBOEntityData -Repository $repository -Type Mailbox | Select-Object Email, IsArchive, BackedUpTime | sort-object Email # User mailbox backup status.\n$oneDriveData = Get-VBOEntityData -Repository $repository -Type OneDrive | Select-Object DisplayName, Url, BackedUpTime | sort-object Title # OneDrive backup status.\n$spoData = Get-VBOEntityData -Repository $repository -Type Site | Where-Object {$_.Url -notlike "*personal*"} |Select-Object DisplayName, Url, BackedUpTime | sort-object Title  # SPO site backup status.\n\n\n$dateRange = (get-date).AddDays(-7).Date # Set the date range to collect backup jobs from.\n$backupJobReport = Get-VBOJobSession -JobType Backup | Where-Object {$_.JobName -like "enter filter" -and $_.EndTime -gt $dateRange} | Select-Object JobName, Status, EndTime # Get last 30 days of the backup job sessions.\n\n$mailboxData | Export-Excel -WorkSheetName "MailboxData" -Path "$reportPath"\n$oneDriveData | Export-Excel -WorkSheetName "OneDriveData" -Path "$reportPath"\n$spoData | Export-Excel -WorkSheetName "SharePointSiteData" -Path "$reportPath"\n$backupJobReport | Export-Excel -WorkSheetName "BackupJobData" -Path "$reportPath"\n\n# Get the credential\n$emailusername = "email.address@domain.com" # Set the username for the account.\n$encrypted = Get-Content "$env:USERPROFILE\\encrypted_password_for_reporting.txt" | ConvertTo-SecureString # Decrypt the password file using the logged in account.\n$credential = New-Object System.Management.Automation.PsCredential($emailusername, $encrypted) # Creates new PS objects to store the above in.\n\n## Define the Send-MailMessage parameters\n$mailParams = @{\n    SmtpServer                 = \'smtp.office365.com\'\n    Port                       = \'587\' # or \'25\' if not using TLS\n    UseSSL                     = $true ## or not if using non-TLS\n    Credential                 = $credential\n    From                       = \'email.address@domain.com\'\n    To                         = \'email.address@domain.com\'# , \'recipient@NotYourDomain.com\'\n    Subject                    = "SMTP Client Submission - $(Get-Date -Format g)"\n    Body                       = \'This is a test email using SMTP Client Submission\'\n    Attachment                 =  $reportPath\n    DeliveryNotificationOption = \'OnFailure\', \'OnSuccess\'\n}\n\n## Send the message\nSend-MailMessage @mailParams\n')))}m.isMDXComponent=!0}}]);